# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import vfl_pb2 as vfl__pb2


class VflStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/vfl_package.Vfl/register',
                request_serializer=vfl__pb2.NodeInfo.SerializeToString,
                response_deserializer=vfl__pb2.Code.FromString,
                )
        self.upload_encrypt_data = channel.unary_unary(
                '/vfl_package.Vfl/upload_encrypt_data',
                request_serializer=vfl__pb2.UploadData.SerializeToString,
                response_deserializer=vfl__pb2.Code.FromString,
                )
        self.get_col_encrypt_data = channel.unary_unary(
                '/vfl_package.Vfl/get_col_encrypt_data',
                request_serializer=vfl__pb2.NodeInfo.SerializeToString,
                response_deserializer=vfl__pb2.DownloadData.FromString,
                )
        self.upload_encrypt_gradient = channel.unary_unary(
                '/vfl_package.Vfl/upload_encrypt_gradient',
                request_serializer=vfl__pb2.EncryptGradient.SerializeToString,
                response_deserializer=vfl__pb2.Code.FromString,
                )
        self.get_decrypt_gradient = channel.unary_unary(
                '/vfl_package.Vfl/get_decrypt_gradient',
                request_serializer=vfl__pb2.NodeInfo.SerializeToString,
                response_deserializer=vfl__pb2.DecryptGradient.FromString,
                )
        self.upload_encrypt_power = channel.unary_unary(
                '/vfl_package.Vfl/upload_encrypt_power',
                request_serializer=vfl__pb2.UploadData.SerializeToString,
                response_deserializer=vfl__pb2.Code.FromString,
                )
        self.get_encrypt_power = channel.unary_unary(
                '/vfl_package.Vfl/get_encrypt_power',
                request_serializer=vfl__pb2.NodeInfo.SerializeToString,
                response_deserializer=vfl__pb2.DownloadData.FromString,
                )
        self.upload_data_list = channel.unary_unary(
                '/vfl_package.Vfl/upload_data_list',
                request_serializer=vfl__pb2.UploadDataList.SerializeToString,
                response_deserializer=vfl__pb2.Code.FromString,
                )
        self.get_data_list = channel.unary_unary(
                '/vfl_package.Vfl/get_data_list',
                request_serializer=vfl__pb2.NodeInfo.SerializeToString,
                response_deserializer=vfl__pb2.DownloadDataList.FromString,
                )
        self.upload_total_loss = channel.unary_unary(
                '/vfl_package.Vfl/upload_total_loss',
                request_serializer=vfl__pb2.UploadData.SerializeToString,
                response_deserializer=vfl__pb2.Code.FromString,
                )
        self.get_total_loss = channel.unary_unary(
                '/vfl_package.Vfl/get_total_loss',
                request_serializer=vfl__pb2.NodeInfo.SerializeToString,
                response_deserializer=vfl__pb2.Loss.FromString,
                )


class VflServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_encrypt_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_col_encrypt_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_encrypt_gradient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_decrypt_gradient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_encrypt_power(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_encrypt_power(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_data_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_data_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_total_loss(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_total_loss(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VflServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=vfl__pb2.NodeInfo.FromString,
                    response_serializer=vfl__pb2.Code.SerializeToString,
            ),
            'upload_encrypt_data': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_encrypt_data,
                    request_deserializer=vfl__pb2.UploadData.FromString,
                    response_serializer=vfl__pb2.Code.SerializeToString,
            ),
            'get_col_encrypt_data': grpc.unary_unary_rpc_method_handler(
                    servicer.get_col_encrypt_data,
                    request_deserializer=vfl__pb2.NodeInfo.FromString,
                    response_serializer=vfl__pb2.DownloadData.SerializeToString,
            ),
            'upload_encrypt_gradient': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_encrypt_gradient,
                    request_deserializer=vfl__pb2.EncryptGradient.FromString,
                    response_serializer=vfl__pb2.Code.SerializeToString,
            ),
            'get_decrypt_gradient': grpc.unary_unary_rpc_method_handler(
                    servicer.get_decrypt_gradient,
                    request_deserializer=vfl__pb2.NodeInfo.FromString,
                    response_serializer=vfl__pb2.DecryptGradient.SerializeToString,
            ),
            'upload_encrypt_power': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_encrypt_power,
                    request_deserializer=vfl__pb2.UploadData.FromString,
                    response_serializer=vfl__pb2.Code.SerializeToString,
            ),
            'get_encrypt_power': grpc.unary_unary_rpc_method_handler(
                    servicer.get_encrypt_power,
                    request_deserializer=vfl__pb2.NodeInfo.FromString,
                    response_serializer=vfl__pb2.DownloadData.SerializeToString,
            ),
            'upload_data_list': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_data_list,
                    request_deserializer=vfl__pb2.UploadDataList.FromString,
                    response_serializer=vfl__pb2.Code.SerializeToString,
            ),
            'get_data_list': grpc.unary_unary_rpc_method_handler(
                    servicer.get_data_list,
                    request_deserializer=vfl__pb2.NodeInfo.FromString,
                    response_serializer=vfl__pb2.DownloadDataList.SerializeToString,
            ),
            'upload_total_loss': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_total_loss,
                    request_deserializer=vfl__pb2.UploadData.FromString,
                    response_serializer=vfl__pb2.Code.SerializeToString,
            ),
            'get_total_loss': grpc.unary_unary_rpc_method_handler(
                    servicer.get_total_loss,
                    request_deserializer=vfl__pb2.NodeInfo.FromString,
                    response_serializer=vfl__pb2.Loss.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vfl_package.Vfl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Vfl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/register',
            vfl__pb2.NodeInfo.SerializeToString,
            vfl__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_encrypt_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/upload_encrypt_data',
            vfl__pb2.UploadData.SerializeToString,
            vfl__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_col_encrypt_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/get_col_encrypt_data',
            vfl__pb2.NodeInfo.SerializeToString,
            vfl__pb2.DownloadData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_encrypt_gradient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/upload_encrypt_gradient',
            vfl__pb2.EncryptGradient.SerializeToString,
            vfl__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_decrypt_gradient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/get_decrypt_gradient',
            vfl__pb2.NodeInfo.SerializeToString,
            vfl__pb2.DecryptGradient.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_encrypt_power(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/upload_encrypt_power',
            vfl__pb2.UploadData.SerializeToString,
            vfl__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_encrypt_power(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/get_encrypt_power',
            vfl__pb2.NodeInfo.SerializeToString,
            vfl__pb2.DownloadData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_data_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/upload_data_list',
            vfl__pb2.UploadDataList.SerializeToString,
            vfl__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_data_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/get_data_list',
            vfl__pb2.NodeInfo.SerializeToString,
            vfl__pb2.DownloadDataList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_total_loss(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/upload_total_loss',
            vfl__pb2.UploadData.SerializeToString,
            vfl__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_total_loss(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vfl_package.Vfl/get_total_loss',
            vfl__pb2.NodeInfo.SerializeToString,
            vfl__pb2.Loss.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
